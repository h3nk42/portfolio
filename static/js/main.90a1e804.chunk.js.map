{"version":3,"sources":["../node_modules/prompt/node_modules/winston/node_modules/colors/lib sync","../node_modules/pkginfo/lib sync /^.*//package/.json$","components/DownArrow.js","App.js","serviceWorker.js","index.js","../node_modules/findout/shim/node sync","../node_modules/utile/lib sync","logo.svg","../node_modules/prompt/node_modules/winston/lib/winston sync"],"names":["webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id","ChevronDownMy","size","color","callback","console","log","App","container","React","createRef","helloRef","typingEffect","text","event","this","current","scrollIntoView","element","ScrollSnap","snapDestinationY","time","bind","bindScrollSnap","ref","className","style","getRandomColor","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.90a1e804.chunk.js","sourcesContent":["function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1021;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 1036;","import React from 'react';\nimport ChevronDown from '@bit/feathericons.react-feather.chevron-down';\nimport { getRandomColor } from '@bit/joshk.jotils.get-random-color';\n\nfunction ChevronDownMy () {\n    return (\n    <ChevronDown size='50' color={'white'}/>\n    );\n}\n\nexport default ChevronDownMy;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ScrollSnap from \"scroll-snap\";\nimport ReactTypingEffect from 'react-typing-effect';\n\nimport { getRandomColor } from '@bit/joshk.jotils.get-random-color';\n\nimport ChevronDown from \"./components/DownArrow\";\nimport {get} from \"bit-bin/dist/api/consumer/lib/global-config\";\n\n\nfunction callback() {\n    console.log(\"snapped\");\n}\n\nclass App extends React.Component {\n    container = React.createRef();\n    helloRef = React.createRef();\n\n\n\n    typingEffect = () => {\n        return (\n            <ReactTypingEffect\n                text=\"Hello. My name is Henk and I study computer science!\" //text=[\"Hello.\", \"World!\"]\n            />);\n    };\n\n    handleClick(event) {\n        if (this.helloRef && this.helloRef.current) {\n            this.helloRef.current.scrollIntoView();\n        }\n    }\n\n\n    bindScrollSnap () {\n        const element = this.container.current;\n        const snapElement = new ScrollSnap(element, {\n            snapDestinationY: \"90%\",\n            time: true\n        });\n\n        snapElement.bind(callback);\n    }\n\n    componentDidMount() {\n        this.bindScrollSnap();\n    }\n\n    render() {\n        return (\n            <div id=\"container\" ref={this.container}>\n                <div className=\"page first-page\" id='myTarget'>\n                    <div className='boxes boxesTop'>\n                        <div className='box'>\n                            <h1 style={{color: getRandomColor()} }>HENK</h1>\n                        </div>\n                        <div className='box'>\n\n                        </div>\n                        <div className='box'>\n                            <h1>DER</h1>\n                        </div>\n                        <div className='box'>\n\n                        </div>\n                    </div>\n\n                    <div className='boxes'>\n                        <div className='box'>\n\n                        </div>\n                        <div className='box'>\n                            <h1>VAN</h1>\n                        </div>\n                        <div className='box'>\n\n                        </div>\n                        <div className='box'>\n                            <h1>SLOOT</h1>\n                        </div>\n                    </div>\n\n                    <div className=\"scrolling\">\n                        {this.typingEffect()}\n                    </div>\n\n                    <div className=\"hint\">\n                        \n                        </div>\n                    <div className='ArrowDown'><ChevronDown></ChevronDown></div>\n\n                </div>\n                <div className=\"page second-page\">\n                    <div className='scrolling'>II</div>\n                </div>\n                <div className=\"page third-page\">\n                    <div className='scrolling'>III</div>\n                </div>\n                <div ref={this.helloRef} className=\"page fourth-page\">\n                    <div className='scrolling'>IV</div>\n                    <div className=\"hint\"><a className=\"link\" href='#myTarget' >back up!</a></div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 251;","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 377;","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 950;"],"sourceRoot":""}